#! /usr/bin/env bash
##############################################################################
#                                                                            #
#          FILE: git-branch-data                                             #
#                                                                            #
#   DESCRIPTION: Displays most recent commit data for a set of branches      #
#                                                                            #
#       VERSION: 1.2.0                                                       #
#                                                                            #
##############################################################################

declare version='1.2.0'

declare usage
read -d '' usage <<EOF
Usage: git-branch-data [-ahmtuv] [-b <branchname>]
EOF

declare helptext
read -d '' helptext <<EOH
${usage}

Version: ${version}

Print data about each git branch present on the remote which has not yet been
fully merged to master.

Data is returned in the form:
    BRANCH_NAME|AUTHOR_NAME|AUTHOR_EMAIL|LAST_COMMIT_DATE|LAST_COMMIT

Options:

    -a --all --all-branches:
        Return data about all branches, not just those not yet merged to
        master.

    -b --branch --relative-branch <BRANCH_NAME>:
        Return data for branches not merged to BRANCH_NAME, rather than
        master.

    -h --help:
        Display this help text.

    -m --merged --merged-only:
        Return data only about merged branches, rather than unmerged.

    -t --tab:
        Replace the '|'s in the output data with tabs.

    -u --unmerged unmerged-only:
        Return data only about unmerged branches. The default.

    -v --version:
        Print the program version and terminate.

EOH

# If we're not in a git directory there's no point in doing anything
if ! git rev-parse --is-inside-work-tree &>/dev/null ; then
    echo "Aborting - not in git working copy!" >&2
    exit 1
fi

# Command line options
declare lastarg=''
declare relbranch='master'
declare mergearg='--no-merged'
declare sep='|'
declare -i gotbranchtypearg=0

# getbranchlogs {{{
#
# Read the log for a given list of branch names on STDIN.
# Output logs to STDOUT.
getbranchlogs () {
    while read ; do
        declare fullname="${REPLY}"
        declare partname="$(echo "${REPLY}"                   |
                            sed --expression='s/ *origin\///' )"
        declare logline="$(git log                                    \
                             --pretty="%an${sep}%ae${sep}%ad${sep}%s" \
                             "${fullname}"                            |
                           head --lines=1                             )"
        echo "${partname}${sep}${logline}"
    done
}
# }}}

# shouldsplitarg () {{{
#
# Determine if an argument is of the form -abc, as opposed to -a -b -c
shouldsplitarg () {
    if (( ${#1} >= 2 )) && [[ "${1:0:1}" == '-' && "${1:1:1}" != '-' ]] ; then
        return 0
    else
        return 1
    fi
}
# }}}

# Split single argument with many options into multiple arguments {{{
declare -a args=()
for arg in "$@" ; do
    if shouldsplitarg "${arg}" ; then
        declare -i arglen="${#arg}"
        declare -i ii
        for (( ii = 1; ii < arglen; ii++ )) ; do
            args[${#args[@]}]="-${arg:${ii}:1}"
        done
    else
        args[${#args[@]}]="${arg}"
    fi
done
# }}}

# Parse arguments {{{

# State machine states
declare -i state_norm=0
declare -i state_relative_branch=1
declare -i state="${state_norm}"

for arg in "${args[@]}" ; do
    case "${state}" in
        ${state_norm})
            case "${arg}" in
                --all-branches|--all|-a)
                    mergearg=''
                    if (( gotbranchtypearg )) ; then
                        echo "Got too many a/m/u args! Only 1 is permitted." >&2
                        exit 1
                    fi
                    (( gotbranchtypearg++ ))
                    ;;
                --relative-branch|--branch|-b)
                    (( state = state_relative_branch ))
                    ;;
                --help|-h)
                    echo "${helptext}"
                    exit 0
                    ;;
                --merged-only|--merged|-m)
                    mergearg='--merged'
                    if (( gotbranchtypearg )) ; then
                        echo "Got too many a/m/u args! Only 1 is permitted." >&2
                        exit 1
                    fi
                    (( gotbranchtypearg++ ))
                    ;;
                --tab|-t)
                    sep=$'\t'
                    ;;
                --unmerged-only|--unmerged|-u)
                    mergearg='--no-merged'
                    if (( gotbranchtypearg )) ; then
                        echo "Got too many a/m/u args! Only 1 is permitted." >&2
                        exit 1
                    fi
                    (( gotbranchtypearg++ ))
                    ;;
                --version|-v)
                    echo "${version}"
                    exit 0
                    ;;
                *)
                    echo "Unknown argument ${arg}!" >&2
                    echo "${usage}" >&2
                    exit 1
                    ;;
            esac
            ;;
        ${state_relative_branch})
            relbranch="${arg}"
            (( state = state_norm ))
            ;;
        *)
            echo "Programming error! State ${state}" >&2
            exit 1
            ;;
    esac
    # Remember last arg
    lastarg="${arg}"
done
# }}}

# Validate end of parsing {{{
if (( state != state_norm )) ; then
    # We should have returned to normal state at the end. If we didn't, then
    # something went wrong. This is why we need to remember the last argument
    # we saw.
    echo "Missing mandatory argument for option ${lastarg}!" >&2
    echo "${usage}" >&2
    exit 1
fi
# }}}

# Main function
{
    if [[ -z "${mergearg}" ]] ; then
        # We don't care if the branches are already fully merged, show them
        # anyway. In this case relbranch means nothing, so ignore it.
        git branch --remotes
    else
        git branch --remotes "${mergearg}" "${relbranch}" |
        sed --expression='/origin\/'"${relbranch}"'$/d'   ;
    fi
}                                  |
sed --expression='/origin\/HEAD/d' | # Remove HEAD reference
sed --expression='s/^ *//'         | # Strip leading spaces
getbranchlogs                      ;

# Vim: set et sw=4 ts=4 sts=4 fdm=marker fmr={{{,}}} ai si pi ci :

#! /usr/bin/env bash
##############################################################################
#                                                                            #
#          FILE: git-branch-data                                             #
#                                                                            #
#   DESCRIPTION: Displays most recent commit data for a set of branches      #
#                                                                            #
#       VERSION: 1.2.0                                                       #
#                                                                            #
##############################################################################

declare VERSION='1.2.0'

declare USAGE
read -d '' USAGE <<EOF
Usage: git-branch-data [-ahmtuv] [-b <branchname>]
EOF

declare HELPTEXT
read -d '' HELPTEXT <<EOH
${USAGE}

Version: ${VERSION}

Print data about each git branch present on the remote which has not yet been
fully merged to master.

Data is returned in the form:
    BRANCH_NAME|AUTHOR_NAME|AUTHOR_EMAIL|LAST_COMMIT_DATE|LAST_COMMIT

Options:

    -a --all --all-branches:
        Return data about all branches, not just those not yet merged to
        master.

    -b --branch --relative-branch <BRANCH_NAME>:
        Return data for branches not merged to BRANCH_NAME, rather than
        master.

    -h --help:
        Display this help text.

    -m --merged --merged-only:
        Return data only about merged branches, rather than unmerged.

    -t --tab:
        Replace the '|'s in the output data with tabs.

    -u --unmerged unmerged-only:
        Return data only about unmerged branches. The default.

    -v --version:
        Print the program version and terminate.

EOH

# Command line options
declare RELBRANCH='master'
declare MERGEARG='--no-merged'
declare SEP='|'

# branchnametolog () {{{
#
# Read the log for a given list of branch names on STDIN.
# Output logs to STDOUT.
branchnametolog () {
    while read ; do
        declare fullname="${REPLY}"
        declare partname="$(echo "${REPLY}"                   |
                            sed --expression='s/ *origin\///' )"
        declare logline="$(git log                                    \
                             --pretty="%an${SEP}%ae${SEP}%ad${SEP}%s" \
                             "${fullname}"                            |
                           head --lines=1                             )"
        echo "${partname}${SEP}${logline}"
    done
}
# }}}

# shouldsplitarg () {{{
#
# Determine if an argument is of the form -abc, as opposed to -a -b -c
shouldsplitarg () {
    if (( ${#1} >= 2 )) && [[ "${1:0:1}" == '-' && "${1:1:1}" != '-' ]] ; then
        return 0
    else
        return 1
    fi
}
# }}}

# parseargs () {{{
#
# Parse the command line args.
parseargs () {
    # Split the args if they are shortopts.
    declare -a args=()
    for arg in "$@" ; do
        if shouldsplitarg "${arg}" ; then
            declare -i arglen="${#arg}"
            declare -i ii
            for (( ii = 1; ii < arglen; ii++ )) ; do
                args[${#args[@]}]="-${arg:${ii}:1}"
            done
        else
            args[${#args[@]}]="${arg}"
        fi
    done

    # State machine states
    declare -i state_norm=0
    declare -i state_relative_branch=1
    declare -i state="${state_norm}"

    # Other tracking info
    declare lastarg=''
    declare -i gotbranchtypearg=0

    # Begin state machine across the args.
    for arg in "${args[@]}" ; do
        case "${state}" in
            ${state_norm})
                case "${arg}" in
                    --all-branches|--all|-a)
                        MERGEARG=''
                        if (( gotbranchtypearg )) ; then
                            echo "Got too many a/m/u args! Only 1 is permitted." >&2
                            return 1
                        fi
                        (( gotbranchtypearg++ ))
                        ;;
                    --relative-branch|--branch|-b)
                        (( state = state_relative_branch ))
                        ;;
                    --help|-h)
                        echo "${HELPTEXT}"
                        return 2
                        ;;
                    --merged-only|--merged|-m)
                        MERGEARG='--merged'
                        if (( gotbranchtypearg )) ; then
                            echo "Got too many a/m/u args! Only 1 is permitted." >&2
                            return 1
                        fi
                        (( gotbranchtypearg++ ))
                        ;;
                    --tab|-t)
                        SEP=$'\t'
                        ;;
                    --unmerged-only|--unmerged|-u)
                        MERGEARG='--no-merged'
                        if (( gotbranchtypearg )) ; then
                            echo "Got too many a/m/u args! Only 1 is permitted." >&2
                            return 1
                        fi
                        (( gotbranchtypearg++ ))
                        ;;
                    --version|-v)
                        echo "${VERSION}"
                        return 2
                        ;;
                    *)
                        echo "Unknown argument ${arg}!" >&2
                        echo "${USAGE}" >&2
                        return 1
                        ;;
                esac
                ;;
            ${state_relative_branch})
                RELBRANCH="${arg}"
                (( state = state_norm ))
                ;;
            *)
                echo "Programming error! State ${state}" >&2
                return 1
                ;;
        esac
        # Remember last arg
        lastarg="${arg}"
    done

    # Validate end of parsing
    if (( state != state_norm )) ; then
        # We should have returned to normal state at the end. If we didn't, then
        # something went wrong. This is why we need to remember the last argument
        # we saw.
        echo "Missing mandatory argument for option ${lastarg}!" >&2
        echo "${USAGE}" >&2
        return 1
    fi

    return 0
}
# }}}

# getbranchnames () {{{
#
# Based on the CLI args, get the branch names we care about.
getbranchnames () {
    if [[ -z "${MERGEARG}" ]] ; then
        # We don't care if the branches are already fully merged, show them
        # anyway. In this case RELBRANCH means nothing, so ignore it.
        git branch --remotes
    else
        git branch --remotes "${MERGEARG}" "${RELBRANCH}" |
        sed --expression='/origin\/'"${RELBRANCH}"'$/d'   ;
    fi
}
# }}}

# isgit () {{{
#
# Check if this dir is a git directory
isgit () {
    if git rev-parse --is-inside-work-tree &>/dev/null ; then
        return 0
    else
        echo "Aborting - not in git working copy!" >&2
        return 1
    fi
}
# }}}

# normalise () {{{
#
#
normalise () {
    declare trimrelative=''
    if [[ -n "${MERGEARG}" ]] ; then
        trimrelative="/origin\\/${RELBRANCH}$/d"
    fi

    sed "
        ${trimrelative}
        /origin\\/HEAD/d
        s/^ *//g
    "
}
# }}}

# MAIN

isgit           &&
parseargs "$@"  &&
getbranchnames   |
normalise        |
branchnametolog  ;

# Vim: set et sw=4 ts=4 sts=4 fdm=marker fmr={{{,}}} ai si pi ci :
